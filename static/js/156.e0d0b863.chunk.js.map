{"version":3,"file":"static/js/156.e0d0b863.chunk.js","mappings":"4LAEaA,EAAS,kBAGlB,SAAC,KAAD,CACAC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,GARS,C,oECCTC,E,OAAeC,GAAAA,IAAH,sG,wLCAZC,EAAaD,EAAAA,GAAAA,GAAH,6CAIVE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,gDAGVI,EAAYJ,EAAAA,GAAAA,GAAH,+C,SCoDtB,EAtDiB,WACf,OAAsCK,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAsBjB,OApBAC,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAS,mCAAG,2FAChBN,GAAa,GADG,kBAGeO,EAAAA,EAAAA,cAHf,WAGRC,EAHQ,QAKMC,OALN,sBAMN,IAAIC,MAAM,SANJ,OAQdZ,EAAeU,GARD,kDAUdN,EAAS,KAAMS,SAVD,yBAYdX,GAAa,GAZC,6EAAH,qDAefM,GACD,GAAE,KAGD,gCACGP,IAAa,SAAC,IAAD,WAAc,SAACf,EAAA,EAAD,MAC3BiB,IACC,mGAICJ,EAAYY,SACb,iCACE,SAACd,EAAD,8BACA,SAACH,EAAD,UACGK,EAAYe,KAAI,SAAAC,GAAK,eACpB,yBACE,SAACpB,EAAD,CACEqB,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMd,GAFjB,6BAIGU,EAAMK,qBAJT,QAI0BL,EAAMM,aAJhC,QAIyCN,EAAMO,QALxCP,EAAME,GADK,WAejC,C,6FC5DKM,EAAM,mCAECd,EAAY,CACjBe,YADiB,WACF,OAAD,qHACKC,EAAAA,GAAAA,IAAA,gEACoCF,IAFzC,cACZG,EADY,gBAKLA,EAASC,KAAKC,QALT,oFAMnB,EACKC,eARiB,SAQFC,GAAU,OAAD,qHACLL,EAAAA,GAAAA,IAAA,6CACiBK,EADjB,oBACoCP,EADpC,oBADK,cACtBG,EADsB,gBAIfA,EAASC,KAJM,oFAK7B,EACKI,mBAdiB,SAcEC,GAAa,OAAD,qHACZP,EAAAA,GAAAA,IAAA,4DACgCF,EADhC,iCAC4DS,EAD5D,gCADY,cAC7BN,EAD6B,gBAItBA,EAASC,KAAKC,QAJQ,oFAKpC,EACKK,eApBiB,SAoBFH,GAAU,OAAD,qHACLL,EAAAA,GAAAA,IAAA,6CACiBK,EADjB,4BAC4CP,EAD5C,oBADK,cACtBG,EADsB,gBAIfA,EAASC,KAJM,oFAK7B,EACKO,kBA1BiB,SA0BCJ,GAAU,OAAD,qHACRL,EAAAA,GAAAA,IAAA,6CACiBK,EADjB,4BAC4CP,EAD5C,2BADQ,cACzBG,EADyB,gBAIlBA,EAASC,KAJS,oFAKhC,E","sources":["components/Loader/Loader.jsx","components/Loader/Loader.styled.js","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.jsx","servises/MoviesApi.js"],"sourcesContent":["import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => (\n   \n  \n    <RotatingLines\n    strokeColor=\"grey\"\n    strokeWidth=\"5\"\n    animationDuration=\"0.75\"\n    width=\"96\"\n    visible={true}\n       \n  />\n\n);\n\n","import styled from 'styled-components';\n\n\nexport const UpdateLoader = styled.div`\nposition: absolute;\nleft: 50%;\ntop: 50%;\ntransform: translate(-50%, -50%);\n` \n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesList = styled.ul`\nlist-style: none;\n\n` \nexport const MovieTitle = styled(Link)`\ntext-decoration: none;\n`\nexport const ListTitle = styled.h2`\npadding-left: 40px;\n\n`\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { Loader } from '../../components/Loader/Loader';\nimport { UpdateLoader } from 'components/Loader/Loader.styled';\nimport { MoviesAPI } from '../../servises/MoviesApi';\nimport { ListTitle, MoviesList, MovieTitle } from './HomePage.styled';\n\nconst HomePage = () => {\n  const [trendMovies, setTrendMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    // MoviesAPI.fetchMovies().then(response => setTrendMovies(response));\n    const getMovies = async () => {\n      setIsLoading(true);\n      try {\n        const moviesResponse = await MoviesAPI.fetchMovies();\n        // console.log(moviesResponse);\n        if (!moviesResponse.length) {\n          throw new Error('Oops!');\n        }\n        setTrendMovies(moviesResponse);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovies();\n  }, []);\n\n  return (\n    <>\n      {isLoading && <UpdateLoader><Loader /></UpdateLoader>}\n      {error && (\n        <p>\n          Sorry!We can't show you the most popular movies now, try again later.\n        </p>\n      )}\n      {!!trendMovies.length && (\n        <>\n          <ListTitle>Trending today</ListTitle>\n          <MoviesList>\n            {trendMovies.map(movie => (\n              <li key={movie.id}>\n                <MovieTitle\n                  to={`/movies/${movie.id}`}\n                  state={{ from: location }}\n                >\n                  {movie.original_name ?? movie.title ?? movie.name}\n                </MovieTitle>\n              </li>\n            ))}\n          </MoviesList>\n        </>\n      )}\n    </>\n  );\n};\nexport default HomePage;\n","import axios from 'axios';\nconst KEY = 'dace3ba60ee82f0a15c6bb8af3a62e30';\n\nexport const MoviesAPI = {\n  async fetchMovies() {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n    );\n    // console.log(response)\n    return await response.data.results;\n  },\n  async fetchMovieById(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    return await response.data;\n  },\n  async fetchMovieBySearch(searchTerm) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&language=en-US&query=${searchTerm}&page=1&include_adult=false`\n    );\n    return await response.data.results;\n  },\n  async fetchMovieCast(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    return await response.data;\n  },\n  async fetchMovieReviews(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n    return await response.data;\n  },\n};\n// export const getMovies = fetchMovies();\n\n// export const getCustomers = () => {\n//   return Promise.resolve(response.results.[]);\n// };\n"],"names":["Loader","strokeColor","strokeWidth","animationDuration","width","visible","UpdateLoader","styled","MoviesList","MovieTitle","Link","ListTitle","useState","trendMovies","setTrendMovies","isLoading","setIsLoading","error","setError","location","useLocation","useEffect","getMovies","MoviesAPI","moviesResponse","length","Error","message","map","movie","to","id","state","from","original_name","title","name","KEY","fetchMovies","axios","response","data","results","fetchMovieById","movieId","fetchMovieBySearch","searchTerm","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}