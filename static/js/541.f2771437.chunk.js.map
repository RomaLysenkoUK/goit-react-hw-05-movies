{"version":3,"file":"static/js/541.f2771437.chunk.js","mappings":"4LAEaA,EAAS,kBAGlB,SAAC,KAAD,CACAC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,GARS,C,oECCTC,E,OAAeC,GAAAA,IAAH,sG,wICDZC,E,OAAWD,GAAAA,GAAH,oD,SCCRE,EAAW,SAAC,GAA2B,IAAbC,EAAY,EAAxBC,UAAYD,KAErC,OACE,yBACGA,EAAKE,OAAS,GACb,wBACGF,EAAKG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,UAACT,EAAD,YAEI,gBACEU,IACEF,EAAY,0CAC2BA,GACnC,iGAENG,IAAKJ,EACLX,MAAM,KACNgB,OAAO,QAEX,4BACE,uBAAIL,KACJ,uCAAeE,UAdJH,EADP,OAqBZ,oDAIP,E,0BCMD,EA/BiB,WAEf,OAAkCO,EAAAA,EAAAA,UAAS,MAA3C,eAAOV,EAAP,KAAkBW,EAAlB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,WAAMH,GAAN,8EACfH,GAAa,GADE,kBAGcO,EAAAA,EAAAA,eAAyBJ,GAHvC,OAGPK,EAHO,OAIbV,EAAaU,GAJA,gDAMbN,EAAS,KAAMO,SANF,yBAQbT,GAAa,GARA,4EAAH,sDAYdM,EAASH,EACV,GAAE,CAACA,KAEF,gCACGJ,IAAa,SAAC,IAAD,WAAc,SAACvB,EAAA,EAAD,MAC3ByB,IAAS,mDACTd,IAAa,SAACF,EAAD,CAAUE,UAAWA,MAGxC,C,6FCrCKuB,EAAM,mCAECH,EAAY,CACjBI,YADiB,WACF,OAAD,qHACKC,EAAAA,GAAAA,IAAA,gEACoCF,IAFzC,cACZG,EADY,gBAKLA,EAASC,KAAKC,QALT,oFAMnB,EACKC,eARiB,SAQFb,GAAU,OAAD,qHACLS,EAAAA,GAAAA,IAAA,6CACiBT,EADjB,oBACoCO,EADpC,oBADK,cACtBG,EADsB,gBAIfA,EAASC,KAJM,oFAK7B,EACKG,mBAdiB,SAcEC,GAAa,OAAD,qHACZN,EAAAA,GAAAA,IAAA,4DACgCF,EADhC,iCAC4DQ,EAD5D,gCADY,cAC7BL,EAD6B,gBAItBA,EAASC,KAAKC,QAJQ,oFAKpC,EACKI,eApBiB,SAoBFhB,GAAU,OAAD,qHACLS,EAAAA,GAAAA,IAAA,6CACiBT,EADjB,4BAC4CO,EAD5C,oBADK,cACtBG,EADsB,gBAIfA,EAASC,KAJM,oFAK7B,EACKM,kBA1BiB,SA0BCjB,GAAU,OAAD,qHACRS,EAAAA,GAAAA,IAAA,6CACiBT,EADjB,4BAC4CO,EAD5C,2BADQ,cACzBG,EADyB,gBAIlBA,EAASC,KAJS,oFAKhC,E","sources":["components/Loader/Loader.jsx","components/Loader/Loader.styled.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","pages/CastPage.jsx","servises/MoviesApi.js"],"sourcesContent":["import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => (\n   \n  \n    <RotatingLines\n    strokeColor=\"grey\"\n    strokeWidth=\"5\"\n    animationDuration=\"0.75\"\n    width=\"96\"\n    visible={true}\n       \n  />\n\n);\n\n","import styled from 'styled-components';\n\n\nexport const UpdateLoader = styled.div`\nposition: absolute;\nleft: 50%;\ntop: 50%;\ntransform: translate(-50%, -50%);\n` \n","import styled from 'styled-components';\n\nexport const CastInfo = styled.li`\ndisplay: flex;\ngap: 10px;\n`","import PropTypes from 'prop-types';\nimport {CastInfo} from './Cast.styled'\n\nexport const CastList = ({ movieInfo: {cast} }) => {\n   \n  return (\n    <div>\n      {cast.length > 0 ? (\n        <ul>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <CastInfo key={id}>\n              \n                <img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : 'https://st2.depositphotos.com/1898481/6448/i/600/depositphotos_64486573-stock-photo-people.jpg'\n                  }\n                  alt={name}\n                  width='50'\n                  height='75'\n                />\n              <div>\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </div>\n            </CastInfo>\n          ))}\n        </ul>\n      ) : (\n        <p>We have no more details</p>\n      )}\n    </div>\n  );\n};\n\nCastList.propTypes = {\n  info: PropTypes.shape({\n    cast: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        profile_path: PropTypes.string,\n        character: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n// import { Loader } from '../components/Loader/Loader';\n// import { useFetchMovieInfo } from 'hooks/useFetchMovieInfo';\nimport { CastList } from '../components/Cast/Cast';\nimport { MoviesAPI } from '../servises/MoviesApi';\nimport { UpdateLoader } from 'components/Loader/Loader.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst CastPage = () => {\n  //   const { movieInfo, isLoading, error } = FetchMovieCast('movieId');\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await MoviesAPI.fetchMovieCast(movieId);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(movieId);\n  }, [movieId]);\n  return (\n    <>\n      {isLoading && <UpdateLoader><Loader/></UpdateLoader>}\n      {error && <p>We have no more details</p>}\n      {movieInfo && <CastList movieInfo={movieInfo} />}\n    </>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\nconst KEY = 'dace3ba60ee82f0a15c6bb8af3a62e30';\n\nexport const MoviesAPI = {\n  async fetchMovies() {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n    );\n    // console.log(response)\n    return await response.data.results;\n  },\n  async fetchMovieById(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    return await response.data;\n  },\n  async fetchMovieBySearch(searchTerm) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&language=en-US&query=${searchTerm}&page=1&include_adult=false`\n    );\n    return await response.data.results;\n  },\n  async fetchMovieCast(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    return await response.data;\n  },\n  async fetchMovieReviews(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n    return await response.data;\n  },\n};\n// export const getMovies = fetchMovies();\n\n// export const getCustomers = () => {\n//   return Promise.resolve(response.results.[]);\n// };\n"],"names":["Loader","strokeColor","strokeWidth","animationDuration","width","visible","UpdateLoader","styled","CastInfo","CastList","cast","movieInfo","length","map","id","name","profile_path","character","src","alt","height","useState","setMovieInfo","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getMovie","MoviesAPI","movieDetails","message","KEY","fetchMovies","axios","response","data","results","fetchMovieById","fetchMovieBySearch","searchTerm","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}