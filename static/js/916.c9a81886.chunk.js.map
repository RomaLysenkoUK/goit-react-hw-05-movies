{"version":3,"file":"static/js/916.c9a81886.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/Loader/Loader.styled.js","pages/MoviesDetails.styled.js","pages/MoviesDetails.jsx","servises/MoviesApi.js"],"sourcesContent":["import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => (\n   \n  \n    <RotatingLines\n    strokeColor=\"grey\"\n    strokeWidth=\"5\"\n    animationDuration=\"0.75\"\n    width=\"96\"\n    visible={true}\n       \n  />\n\n);\n\n","import styled from 'styled-components';\n\n\nexport const UpdateLoader = styled.div`\nposition: absolute;\nleft: 50%;\ntop: 50%;\ntransform: translate(-50%, -50%);\n` \n","import styled from 'styled-components';\n\nexport const Poster = styled.div`\n/* width: 200px;\nheight: 300px; */\n\n`\n\nexport const Image = styled.img`\n/* width: 100%; */\n`\n\nexport const MainContainer = styled.div`\ngap: 20px;\npadding: 20px;\ndisplay: flex;\nbox-shadow:  0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n  1px 4px 6px rgba(0, 0, 0, 0.16);\n\n`\nexport const Btn = styled.button`\nmargin: 10px auto 10px 20px;\ncolor: #ffffff;\nbackground-color: #07c;\nborder-color: transparent;\nborder-radius: 3px;\npadding: 8px;\ncursor: pointer;\n\n`\nexport const SecondTitle = styled.h3`\npadding-left: 20px;\n`\nexport const ListAdditionalInfo = styled.ul`\nlist-style: none;\n\n`","import { Outlet, useParams, useLocation, useNavigate } from 'react-router-dom';\nimport { useState, useEffect, Suspense} from 'react';\n// import { useFetchMovieInfo } from 'hooks/useFetchMovieInfo';\nimport { MoviesAPI } from '../servises/MoviesApi';\n// import { Movie } from 'components/Movie/Movie';\nimport { Loader } from '../components/Loader/Loader';\nimport { UpdateLoader } from 'components/Loader/Loader.styled';\nimport { LinkItem } from '../components/Navigation/Navigation.styled';\nimport { Poster, Image, MainContainer, Btn, SecondTitle, ListAdditionalInfo } from './MoviesDetails.styled';\n\nconst MoviesDetails = () => {\n  // const { movieInfo, isLoading, error } = useFetchMovieInfo();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const navigation = useNavigate();\n\n  useEffect(() => {\n    const getMovie = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await MoviesAPI.fetchMovieById(movieId);\n        console.log(movieDetails);\n        setMovieInfo(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovie(movieId);\n  }, [movieId]);\n\n  const onBtnClick = () => {\n    navigation(location?.state?.from ?? '/');\n  };\n  console.log(movieInfo);\n\n  return (\n    <>\n      {isLoading && <UpdateLoader><Loader /></UpdateLoader>}\n      {movieInfo && (\n        <>\n          <Btn type=\"button\" onClick={onBtnClick}>\n            Go back\n          </Btn>\n          <MainContainer>\n            <Poster>\n              <Image\n                src={`https://image.tmdb.org/t/p/w500${movieInfo.poster_path}`}\n                alt={\n                  movieInfo.title ?? movieInfo.original_name ?? movieInfo.name \n                }\n                width='250'\n              />\n            </Poster>\n            <div>\n              <h2>\n                {movieInfo.title ?? movieInfo.original_name ?? movieInfo.name} (\n                {new Date(movieInfo.release_date).getFullYear()})\n              </h2>\n              <p>User score: {Math.round(movieInfo.vote_average * 10)} %</p>\n              <h3>Genres</h3>\n              <p>{movieInfo.genres?.map(({ name }) => name).join(', ')}</p>\n              <h3>Overview</h3>\n              <p>{movieInfo.overview}</p>\n            </div>\n          </MainContainer>\n          <SecondTitle>Additional information</SecondTitle>\n          <ListAdditionalInfo>\n            <li>\n              <LinkItem to=\"cast\" state={location.state}>\n                Cast\n              </LinkItem>\n            </li>\n            <li>\n              <LinkItem to=\"reviews\" state={location.state}>\n                Reviews\n              </LinkItem>\n            </li>\n          </ListAdditionalInfo>\n        </>\n      )}\n      {error && <p>Ooops!</p>}\n      <Suspense fallback={<Loader/>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MoviesDetails;\n","import axios from 'axios';\nconst KEY = 'dace3ba60ee82f0a15c6bb8af3a62e30';\n\nexport const MoviesAPI = {\n  async fetchMovies() {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n    );\n    // console.log(response)\n    return await response.data.results;\n  },\n  async fetchMovieById(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    return await response.data;\n  },\n  async fetchMovieBySearch(searchTerm) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&language=en-US&query=${searchTerm}&page=1&include_adult=false`\n    );\n    return await response.data.results;\n  },\n  async fetchMovieCast(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    return await response.data;\n  },\n  async fetchMovieReviews(movieId) {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n    );\n    return await response.data;\n  },\n};\n// export const getMovies = fetchMovies();\n\n// export const getCustomers = () => {\n//   return Promise.resolve(response.results.[]);\n// };\n"],"names":["Loader","strokeColor","strokeWidth","animationDuration","width","visible","UpdateLoader","styled","Poster","Image","MainContainer","Btn","SecondTitle","ListAdditionalInfo","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","movieId","useParams","location","useLocation","navigation","useNavigate","useEffect","getMovie","MoviesAPI","movieDetails","console","log","message","type","onClick","state","from","src","poster_path","alt","title","original_name","name","Date","release_date","getFullYear","Math","round","vote_average","genres","map","join","overview","to","Suspense","fallback","KEY","fetchMovies","axios","response","data","results","fetchMovieById","fetchMovieBySearch","searchTerm","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}